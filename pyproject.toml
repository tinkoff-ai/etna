[tool.poetry]
name = "etna"
version = "2.1.0"
repository = "https://github.com/tinkoff-ai/etna"
readme = "README.md"
description = "ETNA is the first python open source framework of Tinkoff.ru AI Center. It is designed to make working with time series simple, productive, and fun."
license = "Apache-2.0"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License"
]

packages = [
    { include = "etna", from = "." },
]

authors = [
    "Andrey Alekseev <ilekseev@gmail.com>",
    "Julia Shenshina <y.a.shenshina@tinkoff.ru>",
    "Martin Gabdushev <m.gabdushev@tinkoff.ru>",
    "Albina Munirova <a.i.munirova@tinkoff.ru>",
    "Artem Levashov <levashov.as@phystech.edu>",
    "Alexey Podkidyshev <podkidyshev.as@phystech.edu>",
    "Nikita Barinov <n.barinov@tinkoff.ru>",
    "Dmitry Bunin <d.a.bunin@tinkoff.ru>",
    "Alexander Chikov <a.p.chikov@tinkoff.ru>",
    "Artem Makhin <a.makhin@tinkoff.ru>"
]

[tool.poetry.dependencies]
python = ">=3.8.0, <3.11.0"
scikit-learn = ">=0.24, <2"
pandas = "^1.1"
catboost = ">=0.21"
ruptures = "^1.1.5"
numba = ">=0.53.1,<0.56.0"
seaborn = "^0.11.1"
statsmodels = ">=0.12,<0.14"
pmdarima = ">=1.8.0"
dill = "^0.3.4"
toml = "^0.10.2"
loguru = "^0.5.3"
hydra-slayer = "^0.2.0"
typer = "^0.4.0"
omegaconf = "^2.1.1"
holidays = ">=0.13,<1.0"
boto3 = "^1.5"
botocore = "*"
scipy = "^1.0"
Bottleneck = "^1.3.4"
numpy = "*"
joblib = "*"
plotly = "*"
hydra_slayer = "*"
matplotlib = "*"
typing_extensions = "*"
tbats = "^1.1.0"
Deprecated = "1.2.13"
types-Deprecated = "1.2.9"

prophet = {version = "^1.0", optional = true}

torch = {version = ">=1.8.0,<1.12.0", optional = true}
pytorch-forecasting = {version = "^0.9.0", optional = true}
pytorch-lightning = {version = "*", optional = true}

wandb = {version = "^0.12.2", optional = true}

optuna = {version = ">=2.5.0,<3.0.0", optional = true}
sqlalchemy = {version = "^1.1.0", optional = true}

sphinx-mathjax-offline = {version = "^0.0.1", optional = true}
nbsphinx = {version = "^0.8.2", optional = true}
Sphinx = {version = "^4.1", optional = true}
numpydoc = {version = "^1.1.0", optional = true}
sphinx-rtd-theme = {version = "^0.5.1", optional = true}
myst-parser = {version = "^0.15.0", optional = true}
GitPython = {version = "^3.1.20", optional = true}

pytest = {version = "^6.2", optional = true}
coverage = {version = "^5.4", optional = true}
pytest-cov = {version = "^2.11.1", optional = true}

black = {extras = ["jupyter"], version = "^22.3.0", optional = true}
isort = {version = "^5.8.0", optional = true}
flake8 = {version = "^3.9.2", optional = true}
pep8-naming = {version = "^0.12.1", optional = true}
flake8-bugbear = {version = "^22.4.25", optional = true}
flake8-comprehensions = {version = "^3.9.0", optional = true}
flake8-docstrings = {version = "^1.6.0", optional = true}
mypy = {version = ">=0.950,<2", optional = true}
types-PyYAML = {version = "^6.0.0", optional = true}
codespell = {version = "^2.0.0", optional = true}

click = {version = ">=8.0.1, <8.1", optional = true}
semver = {version = "^2.13.0", optional = true}
ipywidgets = {version = "^7.6.5", optional = true}

jupyter = {version = "*", optional = true}
nbconvert = {version = "*", optional = true}
pyts = {version = "^0.12.0", optional = true}
tsfresh = {version = "~0.20.0", optional = true}
types-setuptools = {version = "^65.7.0", optional = true}


[tool.poetry.extras]
# optional deps
prophet = ["prophet"]
torch = ["torch", "pytorch-forecasting", "pytorch-lightning"]
wandb = ["wandb"]
auto = ["optuna", "sqlalchemy"]
classification = ["pyts", "tsfresh"]
# dev deps
release = ["click", "semver"]
docs = ["Sphinx", "numpydoc", "sphinx-rtd-theme", "nbsphinx", "sphinx-mathjax-offline", "myst-parser", "GitPython"]
tests = ["pytest-cov", "coverage", "pytest"]
jupyter = ["jupyter", "nbconvert", "black"]
style = ["black", "isort", "flake8", "pep8-naming", "flake8-docstrings", "mypy", "types-PyYAML", "codespell", "flake8-bugbear", "flake8-comprehensions", "types-setuptools"]

all = [
    "prophet",
    "torch", "pytorch-forecasting", "pytorch-lightning",
    "wandb",
    "optuna", "sqlalchemy",
    "pyts", "tsfresh"
]

all-dev = [
    "prophet",
    "torch", "pytorch-forecasting", "pytorch-lightning",
    "wandb",
    "optuna", "sqlalchemy",
    "click", "semver",
    "Sphinx", "numpydoc", "sphinx-rtd-theme", "nbsphinx", "sphinx-mathjax-offline", "myst-parser", "GitPython",
    "pytest-cov", "coverage", "pytest",
    "black", "isort", "flake8", "pep8-naming", "flake8-docstrings", "mypy", "types-PyYAML", "codespell", "flake8-bugbear", "flake8-comprehensions", "types-setuptools",
    "click", "semver",
    "jupyter", "nbconvert",
    "pyts", "tsfresh"
]

[tool.poetry.scripts]
etna = "etna.commands.__main__:app"

[tool.black]
line-length = 120
target-version = ['py37', 'py38', 'py39']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | etna/libs

  # The following are specific to Black, you probably don't want those.
  | blib2to3
  | tests/data
)/
'''

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120

[tool.pytest.ini_options]
minversion = "6.0"
doctest_optionflags = "NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL NUMBER"
# TODO: Uncomment after some solution in https://github.com/pytest-dev/pytest/issues/10773
#filterwarnings = [
#    "error",
#    "ignore: Torchmetrics v0.9 introduced a new argument class property called `full_state_update` that",
#    "ignore: TSDataset freq can't be inferred",
#    "ignore: test_size, test_start and test_end cannot be",
#    "ignore: You probably set wrong freq. Discovered freq in you data is None",
#    "ignore: Some regressors don't have enough values in segment",
#    "ignore: Segments contains NaNs in the last timestamps.",
#    "ignore: pandas.util.testing is deprecated. Use the functions in the public API",
#    "ignore: Call to deprecated class CatBoostModelPerSegment.", # OK
#    "ignore: Call to deprecated class CatBoostModelMultiSegment.", # OK
#    "ignore: Attribute 'loss' is an instance of `nn.Module` and is already",
#    "ignore: Columns from feature_to_use which are out of dataframe columns will",
#    "ignore: Comparison of Timestamp with datetime.date is deprecated in order to",
#    "ignore: CountryHoliday is deprecated, use country_holidays instead.",
#    "ignore: Exogenous or target data contains None! It will be dropped",
#    "ignore: is less than n_segments. Algo will filter data",
#    "ignore: Given top_k=30 is bigger than n_features=20. Transform will not filter",
#    "ignore: Implicitly cleaning up ",
#    "ignore: Maximum Likelihood optimization failed to converge. Check mle_retvals",
#    "ignore: Mean of empty slice",
#    "ignore: No frequency information was provided, so inferred frequency D will",
#    "ignore: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.",
#    "ignore: Slicing a positional slice with .loc is not supported",
#    "ignore: Some of external objects in input parameters could be not",
#    "ignore: The 'check_less_precise' keyword in testing.assert_*_equal is deprecated and will be",
#    "ignore: The default dtype for empty Series will be 'object' instead",
#    "ignore: This model does not work with exogenous features and regressors.",
#    "ignore: Transformation will be applied inplace, out_column param will be ignored",
#    "ignore: You defined a `validation_step` but have no `val_dataloader`. Skipping val",
#    "ignore: You probably set wrong freq. Discovered freq in you data",
#    "ignore: SeasonalMovingAverageModel does not work with any exogenous series or features.",
#    "ignore: MovingAverageModel does not work with any exogenous series or features.",
#    "ignore: NaiveModel does not work with any exogenous series or features.",
#    "ignore: `np.object` is a deprecated alias for the builtin `object`. To",
#    "ignore: divide by zero encountered in log",
#    "ignore: inplace is deprecated and will be removed in a future",
#    "ignore: invalid value encountered in double_scalars",
#    "ignore: Arrays of bytes/strings is being converted to decimal numbers if",
#    "ignore: Attribute 'logging_metrics' is an instance of `nn.Module` and is already",
#    "ignore: Exogenous data contains columns with category type! It will be",
#    "ignore: Features {'unknown'} are not found and will be dropped!",
#    "ignore: SARIMAX model does not work with exogenous features",
#    "ignore: Series.dt.weekofyear and Series.dt.week have been deprecated",
#    "ignore: The dataloader, train_dataloader, does not have many workers which may",
#    "ignore: Creating a tensor from a list of numpy.ndarrays",
#    "ignore: Trying to infer the `batch_size` from an ambiguous collection",
#    "ignore: ReduceLROnPlateau conditioned on metric val_loss which is not available but strict",
#    "ignore: Checkpoint directory",
#    "ignore: Objective did not converge. You might want to increase the number",
#    "ignore: distutils Version classes are deprecated.",
#    "ignore: invalid escape sequence",
#    "ignore::pandas.core.common.SettingWithCopyWarning",
#    "ignore: You haven't set all parameters inside class __init__ method.* 'box_cox_bounds'",
#    "ignore: You haven't set all parameters inside class __init__ method.* 'use_box_cox'",
#    "ignore: You haven't set all parameters inside class __init__ method.* 'use_trend'",
#    "ignore: You haven't set all parameters inside class __init__ method.* 'use_damped_trend'",
#    "ignore: You haven't set all parameters inside class __init__ method.* 'seasonal_periods'",
#    "ignore: You haven't set all parameters inside class __init__ method.* 'show_warnings'",
#    "ignore: You haven't set all parameters inside class __init__ method.* 'n_jobs'",
#    "ignore: You haven't set all parameters inside class __init__ method.* 'multiprocessing_start_method'",
#    "ignore: You haven't set all parameters inside class __init__ method.* 'context'",
#    "ignore: You haven't set all parameters inside class __init__ method.* 'use_arma_errors'",
#    "ignore: New behaviour in v1.1.5",
#    "ignore: The 'check_less_precise' keyword in testing",
#    "ignore: Feature names only support names that are all strings",
#    "ignore: Given top_k=.* is less than n_segments. Algo will filter data without Gale-Shapley run.",
#    "ignore: Call to deprecated create function", # protobuf warning
#    "ignore: Dynamic prediction specified to begin during out-of-sample forecasting period, and so has no effect.",
#    "ignore: `tsfresh` is not available, to install it, run `pip install tsfresh==0.19.0 && pip install protobuf==3.20.1`",
#    "ignore::pytorch_lightning.utilities.rank_zero.LightningDeprecationWarning",
#    "ignore: The default method 'yw' can produce PACF values outside",
#    "ignore: All-NaN slice encountered",
#]
markers = [
    "smoke",
    "long_1",
    "long_2"
]

[tool.coverage.report]
exclude_lines = [
    '^ +assert_never\(.*?\)$',
]

[tool.mypy]
ignore_missing_imports = true
strict_optional = true
files = "etna/"
exclude = "etna/libs"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
