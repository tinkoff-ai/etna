name: Publish

on:
  release:
    types:
      - created

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: Install Dependencies
        run: | 
          pip install poetry
          poetry install 
      - name: Build
        run: poetry build
      - name: Publish
        run: poetry publish -u "${{ secrets.PYPI_LOGIN }}" -p "${{ secrets.PYPI_PASS }}"

  build-docs:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Check tag is latest
        id: check-tag
        run: |
          git fetch --tags
          TAGS=$(git tag -l --sort=-version:refname '1.*')
          UNSTABLE_TAGS_MATCH='\-dev\|\-alpha\|\-beta\|\-rc'
          if [[ ${{ github.event.release.prerelease }} == true ]]; then
            TAGS=$(echo "$TAGS" | grep $UNSTABLE_TAGS_MATCH)
          else
            TAGS=$(echo "$TAGS" | grep -v $UNSTABLE_TAGS_MATCH)
          fi
          LATEST_TAG=$(echo "$TAGS" | head -n 1)
          if [[ ${{ github.event.release.tag_name }} == $LATEST_TAG ]]; then
            echo "::set-output name=IS_LATEST::true"
          else
            echo "::set-output name=IS_LATEST::false"
          fi
      - name: Install dependencies
        if: steps.check-tag.outputs.IS_LATEST == 'true'
        run: |
          sudo apt install pandoc
          pip install poetry
          poetry --version
          poetry config virtualenvs.in-project true
          poetry install -vv
          poetry install -E docs
      - name: Build docs
        if: steps.check-tag.outputs.IS_LATEST == 'true'
        run: |
          cd docs
          cp ../examples/*.ipynb source/tutorials
          poetry run make clean ; poetry run make html
          mv build/html/ ../site
      - name: Deploy to Netlify
        if: steps.check-tag.outputs.IS_LATEST == 'true'
        uses: nwtgck/actions-netlify@v1.2
        with:
          publish-dir: './site'
          production-branch: master
          alias: ${{ github.event.release.prerelease && 'unstable' }}
          production-deploy: ${{ !github.event.release.prerelease }}
          deploy-message: "Deploy from GitHub Actions"
          github-token: ${{ secrets.GITHUB_TOKEN }}
          enable-commit-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
